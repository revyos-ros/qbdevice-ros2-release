####################################
## note =
## note.0 = [[qb_hand/Tutorials/ROS Packages Installation|qb SoftHand Installation]]
## note.1 = [[qb_move/Tutorials/ROS Packages Installation|qbmove Installation]]
## title = Basics
## description = Basic knowledge of the qbrobotics control Nodes
## next =
## next.0.link = [[qb_device_control/Tutorials/Details|Details]]
## next.1.link = [[qb_device_control/Tutorials/Communication Handler|Communication Handler]]
## level = BeginnerCategory
## keywords = qbrobotics SoftHand qbmove control
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>>

As shown in the following picture there are two distinct configurations to control several ''qbrobotics®'' devices connected to the system:
 * The first (and recommended) groups all the Hardware Interfaces together (thanks to the [[combined_robot_hw]]) and exploits them as a unique robot system. We have called it ''"synchronous"'' just to point out that every sequence of reads and writes is always done in the same predefined order.
 * The second mode threats every device as an independent Hardware Interface with its dedicated ROS Node which executes the control loop independently w.r.t. the rest of the system, i.e. ''"asynchronously"''.

Mixed configurations can be also achieved through a proper setup. In such a case we can think of synchronous sub-systems which execute asynchronously w.r.t. each other.

''Note that in a single-device system the synchronous mode is a nonsense.''

{{https://bitbucket.org/qbrobotics/qbhand-ros/raw/ddbccc369d6846549e9b03c9dce0c2dc6c1115e1/qb_hand_media/overview_setup.svg|overview_setup|width=755}}

In both cases there is always one central Node which manages the shared resources for the serial communication (e.g. one or many USB ports) and which provides several ROS services to whom wants to interact with the connected devices. This Node is called ''Communication Handler'' and it is usually started in a separate terminal.

{{{#!wiki caution
Please remember that in a multi-device configuration, each ''qbrobotics®'' device connected to your system '''must have a unique ID'''.
}}}

## TutorialCategory




####################################
## note =
## note.0 = [[qb_device_control/Tutorials/Basics|Basics]]
## title = Details
## description = Details on the qbrobotics control Nodes
## next =
## next.0.link = [[qb_device_control/Tutorials/Communication Handler|Communication Handler]]
## next.1.link =
## level = IntermediateCategory
## keywords = qbrobotics SoftHand qbmove control
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>>

To understand what is hiding under the hood, have a look at the C++ classes overview which sums up all the main concepts of our ROS packages:

{{https://bitbucket.org/qbrobotics/qbhand-ros/raw/ddbccc369d6846549e9b03c9dce0c2dc6c1115e1/qb_hand_media/overview_classes.svg|overview_classes|width=755}}

## TutorialCategory




####################################
## note =
## note.0 = [[qb_device_control/Tutorials/Basics|Basics]]
## title = Communication Handler
## description = Details on the Communication Handler Node
## next =
## next.0.link = [[qb_device_control/Tutorials/Control|Control]]
## next.1.link =
## level = BeginnerCategory
## keywords = qbrobotics SoftHand qbmove control
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>>

The Communication Handler Node has no parameters to be set, therefore it is always launched like this:
{{{
roslaunch qb_device_driver communication_handler.launch
}}}

On start, it scans the serial communication resources connected to you system and shows a list of the devices it has found. By default it never scans again for new devices, apart from asking it explicitly during the initialization of a control Node.

This is a simple example when starting the Communication Handler with two ''qbrobotics®'' devices connected on two distinct USB ports:
{{{
[ INFO] [1524044523.511369300]: [CommunicationHandler] handles [/dev/ttyUSB1].
[ INFO] [1524044524.426984697]: [CommunicationHandler] handles [/dev/ttyUSB0].
[ INFO] [1524044525.218613760]: [CommunicationHandler] has found [2] devices connected:
[ INFO] [1524044525.218696997]:                        - device [1] connected through [/dev/ttyUSB0]
[ INFO] [1524044525.218736612]:                        - device [2] connected through [/dev/ttyUSB1]
}}}

When the Communication Handler is on, it provides all the Services required to interact with the connected devices: e.g. ''get info or measurements, activate or deactivate motors, set commands'', and even more... A detailed description of the services can be found in the [[qb_device_driver]] package wiki.

## TutorialCategory




####################################
## note =
## note.0 = [[qb_device_control/Tutorials/Communication Handler|Communication Handler]]
## title = Control
## description = Details on the control Node
## next =
## next.0.link =
## next.1.link =
## level = BeginnerCategory
## keywords = qbrobotics SoftHand qbmove control
####################################
<<IncludeCSTemplate(TutorialCSHeaderTemplate)>>

As shown in [[qb_device_control/Tutorials/Details|Details]] the control Node exploits the [[ros_control]] Controller Manager which loads and runs the device controllers. Each controller provides an Action Server that, together with the Hardware Interface structure, allows the user to send commands to the relative device and get its measurements.

From an API point of view, it is implemented an Action Client which matches the relative trajectory controller and provides a method to send Goals, i.e. command references, directly to the given device. Additionally the Action Client is subscribed to a Topic (`*_controller/command`) that can be used to send reference commands from outside the code, e.g. asynchronously from the command line, or from a higher level control Node, e.g. as a result of a planning algorithm.

{{{#!wiki caution
It is recommended not to mix these two control modes: choose either to control the device directly from the code by extending our API or through this command Topic.
}}}

Regardless the control mode chosen for the given application, and apart form a customization of the API, the following launch file templates can be used respectively to control several devices or a single one:

{{https://bitbucket.org/qbrobotics/qbhand-ros/raw/ddbccc369d6846549e9b03c9dce0c2dc6c1115e1/qb_hand_media/overview_launch.svg|overview_launch|width=755}}

## TutorialCategory